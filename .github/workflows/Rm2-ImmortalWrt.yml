name: Build immortalwrt for D2

on:
  workflow_dispatch:
  schedule:
    - cron: 0 17 */3 * *

env:
  SOURCE_URL: https://github.com/immortalwrt/immortalwrt
  SOURCE_BRANCH: openwrt-21.02
  CONFIG_FILE: configs/Rm-ac2100.config
  DIY_SCRIPT: scripts/diy/RM2-immortalwrt.sh
  COM_SCRIPT: scripts/common.sh
  TOOLCHAIN_TAG: Toolchain
  OPENWRT_RELEASE_TAG: Newifi_D2
  SOURCE: immortalwrt
  TZ: Asia/Shanghai

jobs:
  Toolchain:
    runs-on: ubuntu-22.04

    outputs:
      OPENWRT_PATH: ${{ steps.clone.outputs.OPENWRT_PATH }}
      VERSION_INFO: ${{ steps.clone.outputs.VERSION_INFO }}
      CURRENT_BRANCH: ${{ steps.env.outputs.CURRENT_BRANCH }}
      SOURCE_REPO: ${{ steps.env.outputs.SOURCE_REPO }}
      DEVICE_TARGET: ${{ steps.env.outputs.DEVICE_TARGET }}
      DEVICE_SUBTARGET: ${{ steps.env.outputs.DEVICE_SUBTARGET }}
      TOOLCHAIN_IMAGE: ${{ steps.env.outputs.TOOLCHAIN_IMAGE }}

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: 初始化环境
      id: init
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
        sudo -E apt-get -o Acquire::Retries=3 -y update
        sudo -E apt-get -o Acquire::Retries=3 -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -o Acquire::Retries=3 -qq install -y libfuse-dev
        sudo -E apt-get -o Acquire::Retries=3 -qq install -y $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
        # sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.eu.org/init_build_environment.sh)'
        sudo -E systemctl daemon-reload
        # sudo -E apt-get -o Acquire::Retries=3 -y full-upgrade
        sudo -E apt-get -o Acquire::Retries=3 -y autoremove --purge
        sudo -E apt-get -o Acquire::Retries=3 clean
        sudo mkdir -p /workdir
        sudo chown ${USER}:${GROUPS} /workdir
        sudo timedatectl set-timezone "${TZ}"
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 克隆源码
      if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
      id: clone
      run: |
        df -hT $GITHUB_WORKSPACE
        git clone -q --single-branch --depth 1 $SOURCE_URL -b $SOURCE_BRANCH workspace/openwrt
        cd workspace/openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        echo "OPENWRT_PATH=$(echo $PWD)" >> $GITHUB_OUTPUT
        export VERSION_INFO=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        echo "VERSION_INFO=$(echo $VERSION_INFO)" >> $GITHUB_OUTPUT

    - name: 生成Toolchain配置
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_PATH/.config
        echo -e "\nCONFIG_ALL=y" >> $OPENWRT_PATH/.config
        echo -e "\nCONFIG_ALL_NONSHARED=y" >> $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1

    - name: 生成变量
      id: env
      run: |
        export CURRENT_BRANCH="$(git symbolic-ref --short HEAD)"
        echo "CURRENT_BRANCH=$CURRENT_BRANCH" >> $GITHUB_ENV
        echo "CURRENT_BRANCH=$(echo $CURRENT_BRANCH)" >> $GITHUB_OUTPUT
        cd $OPENWRT_PATH
        export SOURCE_REPO="$(echo $SOURCE_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        echo "SOURCE_REPO=$(echo $SOURCE_REPO)" >> $GITHUB_OUTPUT
        export DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        echo "DEVICE_TARGET=$(echo $DEVICE_TARGET)" >> $GITHUB_OUTPUT
        export DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        echo "DEVICE_SUBTARGET=$(echo $DEVICE_SUBTARGET)" >> $GITHUB_OUTPUT
        export TOOLCHAIN_IMAGE="toolchain-$SOURCE_REPO-$SOURCE_BRANCH-$DEVICE_TARGET-$DEVICE_SUBTARGET"
        echo "TOOLCHAIN_IMAGE=$TOOLCHAIN_IMAGE" >> $GITHUB_ENV
        echo "TOOLCHAIN_IMAGE=$(echo $TOOLCHAIN_IMAGE)" >> $GITHUB_OUTPUT

    - name: 比较Toolchain Hash
      id: hash
      run: |
        cd $OPENWRT_PATH
        export CURRENT_HASH=$(git log --pretty=tformat:"%H" -n1 tools toolchain)
        echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_ENV
        echo "CURRENT_HASH is $CURRENT_HASH"
        export CACHE_HASH=$(curl -fSsL https://github.com/$GITHUB_REPOSITORY/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_IMAGE.hash)
        echo "CACHE_HASH is $CACHE_HASH"
        if [ -z "$CACHE_HASH" ] || [ "$CURRENT_HASH" != "$CACHE_HASH" ]; then
          echo "REBUILD_TOOLCHAIN=true" >> $GITHUB_OUTPUT
        fi

    - name: 安装Feeds
      if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
      run: |
        cd $OPENWRT_PATH
        ./scr
